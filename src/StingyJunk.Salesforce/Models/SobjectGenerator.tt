<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

<#
//follow the directions in the readme for setting up the CSV.

//example records
//SObject: SObject Name,SObjectField: SObjectField Name,type,isCustom, isAccessible
//Lead,MasterRecordId,REFERENCE,0,1

//TT needs to exclude SObject fields that are not accessible but this doesn't. Comment the 
//lines in the original csv

var csvFileName = this.Host.ResolvePath(".\\ObjectMetadataSnapshotSobjectWithFields.csv");
var objectDefs = new List<ObjectDef>();
           
          
using (var sr = new StreamReader(csvFileName))
{

    while (!sr.EndOfStream)
    {
        var line = sr.ReadLine();

        if (line.StartsWith("SObject:", StringComparison.OrdinalIgnoreCase)
			|| line.StartsWith(@"//", StringComparison.OrdinalIgnoreCase))
        {
            continue;
        }

		var elements = line.Split(',');
		var objectName = elements[0].Trim();
		if (string.IsNullOrWhiteSpace(objectName))
		{
			break;
		}
		var objectDef = objectDefs.FirstOrDefault(o => o.ObjectName.Equals(objectName, StringComparison.OrdinalIgnoreCase));
		if (objectDef == null)
		{
			objectDef = new ObjectDef(objectName);
			objectDefs.Add(objectDef);
		}
		var objectField = new ObjectField(elements);
		objectDef.ObjectFields.Add(objectField);

    }
}

#>

namespace StingyJunk.Models.Force 
{
<#
foreach (var objectDef in objectDefs)
{
#>
	public partial class <#= objectDef.ObjectName #>
	{
<#
	foreach(var objectField in objectDef.ObjectFields)
	{
#>
		public string <#= objectField.FieldName #> {get;set;}
<#
	}
#>

		public static string GetSelectQuery()
		{
			return "<#= objectDef.GetQuery() #>";
		}
	}

<#
}

#>
}

<#+

private class ObjectDef
{
	public string ObjectName {get;set;}
	public List<ObjectField> ObjectFields {get;set;}

	public ObjectDef(string name)
	{
		ObjectFields = new List<ObjectField>();
		ObjectName = name;
	}

	public string GetQuery()
	{
		var sb = new System.Text.StringBuilder();
		sb.Append("SELECT ");
		foreach (var field in ObjectFields)
		{
			sb.Append(field.FieldName + ", ");
		}
		sb.Length = sb.Length -2;
		sb.Append(" FROM " + ObjectName);
		return sb.ToString();
	}
}

private class ObjectField
{
	public string FieldName {get;set;}
	public string FieldType {get;set;}
	public bool	IsCustom {get;set;}

	public ObjectField(string[] elements)
	{
		FieldName = elements[1].Trim();
		FieldType = elements[2].Trim();
		var isCustom = elements[3].Trim();
		IsCustom = isCustom == "0" ? false : true;
	}
}
#>